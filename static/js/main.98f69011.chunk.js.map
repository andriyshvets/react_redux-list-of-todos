{"version":3,"sources":["store/index.ts","api.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","components/helpers/debounce.ts","components/helpers/getFilteredTodo.ts","components/helpers/getRandomizeTodo.ts","App.tsx","index.tsx"],"names":["LOADING_TODOS","SELECT_USER","GET_ERROR","GET_USER","DELETE_TODO","actions","todos","type","userId","message","user","id","selectors","state","errorLoading","initialState","sort","store","createStore","action","filter","todo","composeWithDevTools","API_URL","getTodos","a","fetch","response","json","getUser","removeTodo","method","CurrentUser","useSelector","error","dispatch","useDispatch","useEffect","userFromServer","handleClear","useCallback","value","className","name","email","phone","onClick","TodoList","arr","useState","query","setQuery","appliedQuery","setAppliedQuery","status","setStatus","random","setRandom","setSort","selectedUserId","applyQuery","f","delay","timerId","clearTimeout","args","setTimeout","debounce","handleRemoveTodo","handleUser","filteredTodosByStatus","filteredTodos","title","toLowerCase","includes","completed","getFilteredTodo","randomisedTodos","array","newArr","i","length","j","Math","floor","getRandomizeTodo","todosForRender","t1","t2","localeCompare","onChange","event","target","map","classNames","checked","App","errorMessage","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98f69011.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst LOADING_TODOS = 'LOADING_TODOS';\nconst SELECT_USER = 'SELECT_USER';\nconst GET_ERROR = 'GET_ERROR';\nconst GET_USER = 'GET_USER';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const actions = {\n  loadingTodos: (todos: Todo[]) => ({\n    type: LOADING_TODOS,\n    todos,\n  }),\n  selectUser: (userId: number) => ({\n    type: SELECT_USER,\n    userId,\n  }),\n  getError: (message: string) => ({\n    type: GET_ERROR,\n    message,\n  }),\n  getUser: (user: User) => ({\n    type: GET_USER,\n    user,\n  }),\n  deleteTodo: (id: number) => ({\n    type: DELETE_TODO,\n    id,\n  }),\n};\n\nexport const selectors = {\n  loadTodos: (state: RootState) => state.todos,\n  getUserId: (state: RootState) => state.userId,\n  getError: (state: RootState) => state.errorLoading,\n  loadUser: (state: RootState) => state.user,\n};\n\nexport type RootState = {\n  todos: Todo[];\n  userId: number;\n  errorLoading: string;\n  user: User | null,\n  sort: boolean,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  userId: 0,\n  errorLoading: '',\n  user: null,\n  sort: false,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOADING_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SELECT_USER:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n\n    case GET_ERROR:\n      return {\n        ...state,\n        errorLoading: action.message,\n      };\n\n    case GET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n\nexport async function removeTodo(id: number) {\n  fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\nimport { selectors, actions } from '../../store';\n\nexport const CurrentUser: React.FC = () => {\n  const userId = useSelector(selectors.getUserId);\n  const error = useSelector(selectors.getError);\n  const user = useSelector(selectors.loadUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const userFromServer = await getUser(userId);\n\n        dispatch(actions.getUser(userFromServer));\n      } catch {\n        dispatch(actions.getError('Can not load user'));\n      }\n    }\n\n    response();\n  }, [userId]);\n\n  const handleClear = useCallback((value: number) => {\n    dispatch(actions.selectUser(value));\n  }, []);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={() => handleClear(0)}\n            className=\"CurrentUser__clear\"\n          >\n            Clear\n          </button>\n        </div>\n      ) : (<p>{error}</p>)}\n    </>\n  );\n};\n","import React, {\n  ChangeEvent,\n  useState,\n  useCallback,\n} from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeTodo } from '../../api';\n\nimport { actions, selectors } from '../../store';\nimport { getFilteredTodo } from '../helpers/getFilteredTodo';\nimport { getRandomizeTodo } from '../helpers/getRandomizeTodo';\nimport { debounce } from '../helpers/debounce';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [status, setStatus] = useState('All');\n  const [random, setRandom] = useState(false);\n  const [sort, setSort] = useState(false);\n\n  const todos = useSelector(selectors.loadTodos);\n  const selectedUserId = useSelector(selectors.getUserId);\n\n  const dispatch = useDispatch();\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const filterTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    applyQuery(value);\n  };\n\n  const changeStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setStatus(value);\n  };\n\n  const handleRemoveTodo = async (id: number) => {\n    await removeTodo(id);\n\n    dispatch(actions.deleteTodo(id));\n  };\n\n  const handleUser = useCallback((userId: number) => {\n    dispatch(actions.selectUser(userId));\n  }, []);\n\n  const sortList = (arr: Todo[]) => {\n    return [...arr].sort((t1, t2) => (t1.title).localeCompare(t2.title));\n  };\n\n  const filteredTodosByStatus = getFilteredTodo(todos, appliedQuery, status);\n  const randomisedTodos = random\n    ? getRandomizeTodo(filteredTodosByStatus)\n    : filteredTodosByStatus;\n  const todosForRender = sort ? sortList(randomisedTodos) : randomisedTodos;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <p>Search by title</p>\n      <label>\n        <input type=\"text\" value={query} onChange={filterTitle} />\n      </label>\n      <select\n        value={status}\n        onChange={changeStatus}\n        className=\"TodoList__select\"\n      >\n        <option>All</option>\n        <option>Active</option>\n        <option>Completed</option>\n      </select>\n\n      <button\n        type=\"button\"\n        onClick={() => setRandom(state => !state)}\n        className=\"TodoList__additionButton\"\n      >\n        Randomize\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"TodoList__additionButton\"\n        onClick={() => setSort(state => !state)}\n      >\n        Sort\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todosForRender.map(({\n            userId,\n            completed,\n            title,\n            id,\n          }) => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': completed },\n                { 'TodoList__item--unchecked': !completed },\n              )}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={completed} />\n                <p>{title}</p>\n              </label>\n\n              <div>\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                    userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => handleUser(userId)}\n                >\n                  {userId ? `User ${userId}` : 'No user'}\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveTodo(id)}\n                  className=\"TodoList__deleteButton button\"\n                >\n                  🗑\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","type FuncArg = (v: string) => void;\n\nexport const debounce = (f: FuncArg, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n","export const getFilteredTodo = (\n  todos: Todo[],\n  appliedQuery: string,\n  status: string,\n) => {\n  const filteredTodos = todos.filter(({ title }) => {\n    const changeTitle = title.toLowerCase();\n\n    return changeTitle.includes(appliedQuery.toLowerCase());\n  });\n\n  switch (status) {\n    case 'Active':\n      return filteredTodos.filter(({ completed }) => !completed);\n\n    case 'Completed':\n      return filteredTodos.filter(({ completed }) => completed);\n\n    default:\n      return filteredTodos;\n  }\n};\n","export const getRandomizeTodo = (array: Todo[]) => {\n  const newArr = [...array];\n\n  for (let i = newArr.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n\n  return newArr;\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport './App.scss';\n\nimport { getTodos } from './api';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { selectors, actions } from './store';\n\nconst App = () => {\n  const selectedUserId = useSelector(selectors.getUserId);\n  const errorMessage = useSelector(selectors.getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(actions.loadingTodos(todosFromServer));\n      } catch {\n        dispatch(actions.getError('Can not load todos'));\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div>\n      <h1>Redux list of todos</h1>\n      {errorMessage.length === 0 ? (\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      ) : (<p className=\"App__error\">{errorMessage}</p>)}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}